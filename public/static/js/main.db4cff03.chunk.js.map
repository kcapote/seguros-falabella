{"version":3,"sources":["components/bar.jsx","components/table.jsx","config/axios.js","components/simulation.jsx","components/sales.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Table","data","scope","length","map","product","day","name","sellIn","price","clienteAxios","axios","create","baseURL","Simulation","useState","days","saveDays","saveData","simulate","e","a","key","get","result","simulation","placeholder","onChange","target","value","onKeyPress","Sales","sales","saveSales","useEffect","loadSales","objs","sale","productId","console","log","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yQA2BeA,EAxBA,WACX,OACI,yBAAKC,UAAU,iDACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,aACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACxJ,0BAAMP,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BQ,GAAG,aACzC,wBAAIR,UAAU,cACd,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAMS,GAAK,cAAeT,UAAU,YAApC,oBAGJ,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAMS,GAAK,SAAUT,UAAU,YAA/B,yB,gCCcLU,EA7BD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEb,OACA,2BAAOX,UAAU,SACf,2BAAOA,UAAU,cACf,4BACE,wBAAIY,MAAM,OAAV,OACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,OAAV,WAGJ,+BACGD,EAAKE,OAAS,GAAKF,EAAKG,KAAK,SAAAC,GAAO,OAEnC,4BACI,4BAAKA,EAAQC,KACb,4BAAKD,EAAQE,MACb,4BAAKF,EAAQG,QACb,4BAAKH,EAAQI,c,QCdZC,E,OAJMC,EAAMC,OAAO,CAC9BC,QAAS,2BC6CEC,EA7CI,WAAO,IAAD,EACIC,mBAAS,IADb,mBACdC,EADc,KACRC,EADQ,OAEIF,mBAAS,IAFb,mBAEdd,EAFc,KAERiB,EAFQ,KAGfC,EAAQ,uCAAE,WAAOC,GAAP,eAAAC,EAAA,yDAEA,UAATD,EAAEE,IAFO,gCAGaX,EAAMY,IAAN,qCAAwCP,IAHrD,OAGFQ,EAHE,OAKRN,EAASM,EAAOvB,KAAKwB,YALb,2CAAF,sDASd,OACI,kBAAC,WAAD,KACI,yBAAKnC,UAAU,8BAEX,yBAAKA,UAAU,cACX,2BACIE,KAAK,SACLF,UAAW,eACXoC,YAAY,sDACZC,SAAU,SAACP,GAAKH,EAASG,EAAEQ,OAAOC,QAClCA,MAAQb,EACRc,WAAYX,MAMxB,yBAAK7B,UAAU,8BACX,yBAAKA,UAAU,cACVW,GAAQA,EAAKE,OAAS,GACnB,kBAAC,EAAD,CACKF,KAAMA,QCApB8B,EAhCD,WAAO,IAAD,EAEUhB,mBAAS,IAFnB,mBAEXiB,EAFW,KAEJC,EAFI,KAIhBC,qBAAW,WACPC,MACF,IAGF,IAAMA,EAAS,uCAAG,4BAAAd,EAAA,sEACOV,EAAMY,IAAI,SADjB,OACRC,EADQ,OAEdS,EACCT,EAAOvB,KAAKmC,KAAKhC,KACb,SAAAiC,GAAI,OAAIA,EAAKC,UAAU/B,SAG5BgC,QAAQC,IAAIhB,EAAOvB,MAPL,2CAAH,qDAUf,OACI,4BACK+B,EAAM5B,KAAK,SAAAiC,GAAI,OACN,4BACKA,Q,OCJZI,MAjBf,WACE,OACE,yBAAKnD,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,EAAD,MACE,kBAAC,IAAD,KAEE,kBAAC,IAAD,CAAOoD,KAAK,cAAcC,UAAW7B,IACrC,kBAAC,IAAD,CAAO4B,KAAK,SAASC,UAAWZ,IAChC,kBAAC,IAAD,CAAOW,KAAK,IAAIC,UAAW7B,QCJjB8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.db4cff03.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navbar = () => {\n    return ( \n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <a className=\"navbar-brand\" href=\"#\">Falabella</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                <li className=\"nav-item active\">\n                    <Link to ={'/simulation'} className=\"nav-link\" > Simulación </Link>\n\n                </li>\n                <li className=\"nav-item active\">\n                    <Link to ={'/sales'} className=\"nav-link\" > Listado Ventas </Link>\n                </li>\n\n                </ul>\n            </div>\n        </nav>\n\n     );\n}\n \nexport default Navbar;","import React from \"react\";\n\nconst Table = ({ data }) => {\n\n    return (\n    <table className=\"table\">\n      <thead className=\"thead-dark\">\n        <tr>\n          <th scope=\"col\">Day</th>\n          <th scope=\"col\">Name</th>\n          <th scope=\"col\">SellIn</th>\n          <th scope=\"col\">Price</th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.length > 0 && data.map( product =>\n          (\n          <tr>\n              <th>{product.day}</th>  \n              <th>{product.name}</th>\n              <th>{product.sellIn}</th>\n              <th>{product.price}</th>\n          </tr>\n          )\n       )\n      }\n      </tbody>\n    </table>\n  );\n};\n\nexport default Table;\n","import axios from 'axios';\n\n\nconst clienteAxios = axios.create({\n    baseURL: 'http://localhost:3000/'\n});\n\nexport default clienteAxios;","import React, { Fragment, useState, useEffect } from 'react';\nimport Table from './table';\nimport axios from '../config/axios';\n\nconst Simulation = () => {\n    const [days, saveDays] = useState('');\n    const [data, saveData] = useState([]);\n    const simulate =async (e) =>{\n\n        if(e.key ==='Enter'){\n            const result = await axios.get(`/products/evaluateProducts/${days}`);\n            \n            saveData(result.data.simulation);\n        }\n    }\n\n    return ( \n        <Fragment>\n            <div className=\"row justify-content-center\">\n\n                <div className=\"col-8 mt-5\">\n                    <input\n                        type=\"number\"\n                        className =\"form-control\"\n                        placeholder=\"Escriba el número de días de la simulación\"\n                        onChange={(e)=>{saveDays(e.target.value)}}\n                        value ={days}\n                        onKeyPress={simulate}\n                    />\n\n                </div>\n                \n            </div>\n            <div className=\"row justify-content-center\">\n                <div className=\"col-8 mt-5\">\n                    {data && data.length > 0 &&\n                        <Table\n                             data={data}\n                        />\n                    }\n                </div>\n\n            </div>\n\n\n        </Fragment>\n     );\n}\n \nexport default Simulation;","import React,{useEffect} from 'react';\nimport axios from '../config/axios';\nimport { useState } from 'react';\n\n\nconst Sales = () => {\n\n    let [sales, saveSales ] = useState([]);\n\n    useEffect( ()=>{\n        loadSales();\n    },[]);\n\n\n    const loadSales = async () =>{\n        const result = await axios.get('sales');\n        saveSales(\n         result.data.objs.map(\n             sale => sale.productId.name\n         )   \n        )\n        console.log(result.data)\n    }\n\n    return ( \n        <ul>\n            {sales.map( sale =>(\n                      <li>\n                          {sale}\n                      </li>\n            ))\n          \n            }\n        </ul>\n     );\n}\n \nexport default Sales;","import React from 'react';\nimport './App.css';\nimport Navbar from './components/bar';\nimport Simulation from './components/simulation';\nimport Sales from './components/sales';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n      <Navbar/> \n        <Switch>\n\n          <Route path=\"/simulation\" component={Simulation} />\n          <Route path=\"/sales\" component={Sales} />\n          <Route path=\"/\" component={Simulation} />\n        </Switch>\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}